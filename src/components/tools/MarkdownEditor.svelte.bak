<script lang="ts">
  import { Editor } from "bytemd";
    // import breaks from '@bytemd/plugin-breaks'
    // import footnotes from '@bytemd/plugin-footnotes'
    // import frontmatter from '@bytemd/plugin-frontmatter'
    // import gfm from '@bytemd/plugin-gfm'
    // import highlight from '@bytemd/plugin-highlight'
    // import math from '@bytemd/plugin-math'
    // import mediumZoom from '@bytemd/plugin-medium-zoom'
    // import mermaid from '@bytemd/plugin-mermaid'
    // import gemoji from '@bytemd/plugin-gemoji'
    // import { markdownText } from '@bytemd/example-utils'
  //   import locales from './locales'
  // import lintConsistent from 'remark-preset-lint-consistent';

  import "bytemd/dist/index.css";
//   import "github-markdown-css";
  // import 'juejin-markdown-themes/dist/juejin.css';
//   import "highlight.js/styles/vs.css";
//   import "katex/dist/katex.css";
  import Tool from "../Tool.svelte";

  let value = '';
  let mode = "auto";
  let maxLength;
  let plugins = [];

  let containerHeight: number;

  function handleChange(e) {
    value = e.detail.value;
  }

  function uploadImages(files) {
    return Promise.all(
      files.map((file) => {
        // TODO:
        return {
          url: "https://picsum.photos/300",
        };
      })
    );
  }

//   let enabled = {
//     breaks: false,
//     footnotes: false,
//     frontmatter: false,
//     gemoji: false,
//     gfm: false,
//     highlight: false,
//     math: false,
//     "medium-zoom": false,
//     mermaid: false,
//   };

//   $: plugins = [
//     // {
//     //   remark: (p) => p.use(lintConsistent),
//     //   viewerEffect(ctx) {
//     //     console.log(ctx.file.messages);
//     //   },
//     // },
//     enabled.breaks && breaks(),
//     enabled.footnotes && footnotes(),
//     enabled.frontmatter && frontmatter(),
//     enabled.gemoji && gemoji(),
//     enabled.gfm && gfm(),
//     enabled.highlight && highlight(),
//     enabled.math &&
//       math({
//         locale: currentLocale.plugin_math,
//         katexOptions: { output: "html" }, // https://github.com/KaTeX/KaTeX/issues/2796
//       }),
//     enabled["medium-zoom"] && mediumZoom(),
//     enabled.mermaid && mermaid({ locale: currentLocale.plugin_mermaid }),
//   ].filter((x) => x);
</script>

<Tool title="Markdown Editor">
  <div class="container">
    <div class="line">
      Mode:
      {#each ["auto", "split", "tab"] as m}
        <label> <input type="radio" bind:group={mode} value={m} />{m}</label>
      {/each}
      <!-- , Locale: -->
      <!-- <select bind:value={localeKey}>
        {#each Object.keys(locales) as l}
          <option value={l}>{l}</option>
        {/each}
      </select> -->
      , Max length:
      <input bind:value={maxLength} type="number" />
    </div>
    <!-- <div class="line">
      Plugins:
      {#each Object.keys(enabled) as p}
        {" "}
        <label> <input type="checkbox" bind:checked={enabled[p]} />{p}</label>
      {/each}
    </div> -->

    <div id="editor-wrap" bind:clientHeight={containerHeight} style="--height: {containerHeight}px;">
        <div id="inner-wrap" style="--height: {containerHeight}px;">
            <Editor
            {value}
            {mode}
            {maxLength}
            {plugins}
            placeholder={"Start writing with ByteMD"}
            {uploadImages}
            on:change={handleChange}
            />
        </div>
    </div>
  </div>
</Tool>

<style unscoped>
  .container {
    width: 100%;
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  .line {
    margin: 10px 0;
    text-align: center;
  }
  #editor-wrap {
    flex: 1;
    display: block;
  }
  #inner-wrap {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
  }
  /* :global(body) {
    margin: 0 10px;
    font-size: 14px;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial,
      sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
  } */
  :global(.bytemd) {
    /* height: calc(100vh - 100px); */
    height: var(--height) !important;
  }
  /* :global(.medium-zoom-overlay) {
    z-index: 100;
  }
  :global(.medium-zoom-image--opened) {
    z-index: 101;
  } */
</style>
